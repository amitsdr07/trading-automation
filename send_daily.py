import os, requests
from datetime import datetime
import pytz
from openai import OpenAI

# ============= Settings ============
TZ_REGION = os.getenv("TZ_REGION", "Asia/Kolkata")
MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

OPENAI_KEY = os.environ["OPENAI_API_KEY"]
RESEND_KEY = os.environ["RESEND_API_KEY"]
EMAIL_FROM = os.environ["EMAIL_FROM"]
EMAIL_TO = [x.strip() for x in os.environ["EMAIL_TO"].split(",") if x.strip()]

# ===================================

client = OpenAI(api_key=OPENAI_KEY)

def now_in_tz():
    tz = pytz.timezone(TZ_REGION)
    return datetime.now(tz)

def build_prompts(now_iso):
    return [
        {
            "title": "India & Global: High-Impact Stock Market News",
            "user": f"Date: {now_iso}. Write bullet-point highlights of today's biggest stock market news. "
                    "Section India, Section International. Concise, factual, Markdown."
        },
        {
            "title": "GIFT Nifty Sentiment (Today)",
            "user": f"Date: {now_iso}. Summarize today's GIFT Nifty sentiment. Short para + 3-5 bullets. Markdown."
        },
        {
            "title": "Nifty 50: Down ≥20% This Month",
            "user": f"Date: {now_iso}. List Nifty 50 stocks down >=20% month-to-date. If none, say 'None'. "
                    "Output a Markdown table (Rank | Stock | Approx % | Notes)."
        },
    ]

def ask_openai(prompt):
    resp = client.chat.completions.create(
        model=MODEL,
        temperature=0.3,
        messages=[
            {"role": "system", "content": "You are a concise financial markets assistant."},
            {"role": "user", "content": prompt}
        ],
    )
    return resp.choices[0].message.content.strip()

def send_resend(subject, html):
    url = "https://api.resend.com/emails"
    headers = {
        "Authorization": f"Bearer {RESEND_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "from": EMAIL_FROM,
        "to": EMAIL_TO,
        "subject": subject,
        "html": html
    }
    r = requests.post(url, headers=headers, json=data, timeout=30)
    r.raise_for_status()
    print(f"Sent: {subject} → {EMAIL_TO}")

if __name__ == "__main__":
    now = now_in_tz()
    now_iso = now.strftime("%A, %d %B %Y %H:%M %Z")

    prompts = build_prompts(now_iso)

    sections = []
    for bundle in prompts:
        content = ask_openai(bundle["user"])
        sections.append(f"<h2>{bundle['title']}</h2>\n<pre>{content}</pre>")

    body = f"""
    <html>
      <body style="font-family:Arial, sans-serif; line-height:1.5;">
        <h1>Daily Markets Brief</h1>
        <p><em>{now_iso}</em></p>
        {''.join(sections)}
        <hr/>
        <p style="font-size:12px; color:#666;">Generated by OpenAI via GitHub Actions + Resend. Verify with official data before trading.</p>
      </body>
    </html>
    """.strip()

    subject = f"Daily Markets Brief — {now.strftime('%Y-%m-%d')}"
    send_resend(subject, body)
